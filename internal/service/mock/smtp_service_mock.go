// Code generated by MockGen. DO NOT EDIT.
// Source: smtp_service.go

// Package mock is a generated GoMock package.
package mock

import (
	smtp "net/smtp"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSmtpServicer is a mock of SmtpServicer interface.
type MockSmtpServicer struct {
	ctrl     *gomock.Controller
	recorder *MockSmtpServicerMockRecorder
}

// MockSmtpServicerMockRecorder is the mock recorder for MockSmtpServicer.
type MockSmtpServicerMockRecorder struct {
	mock *MockSmtpServicer
}

// NewMockSmtpServicer creates a new mock instance.
func NewMockSmtpServicer(ctrl *gomock.Controller) *MockSmtpServicer {
	mock := &MockSmtpServicer{ctrl: ctrl}
	mock.recorder = &MockSmtpServicerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSmtpServicer) EXPECT() *MockSmtpServicerMockRecorder {
	return m.recorder
}

// PlainAuth mocks base method.
func (m *MockSmtpServicer) PlainAuth(identity, from, password, host string) smtp.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PlainAuth", identity, from, password, host)
	ret0, _ := ret[0].(smtp.Auth)
	return ret0
}

// PlainAuth indicates an expected call of PlainAuth.
func (mr *MockSmtpServicerMockRecorder) PlainAuth(identity, from, password, host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PlainAuth", reflect.TypeOf((*MockSmtpServicer)(nil).PlainAuth), identity, from, password, host)
}

// SendMail mocks base method.
func (m *MockSmtpServicer) SendMail(addr string, a smtp.Auth, from string, to []string, msg []byte) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendMail", addr, a, from, to, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// SendMail indicates an expected call of SendMail.
func (mr *MockSmtpServicerMockRecorder) SendMail(addr, a, from, to, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendMail", reflect.TypeOf((*MockSmtpServicer)(nil).SendMail), addr, a, from, to, msg)
}
